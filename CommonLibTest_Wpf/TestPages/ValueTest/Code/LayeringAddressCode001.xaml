<Page x:Class="CommonLibTest_Wpf.TestPages.ValueTest.Code.LayeringAddressCode001"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:local="clr-namespace:CommonLibTest_Wpf.TestPages.ValueTest.Code"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      d:DataContext="{d:DesignInstance local:LayeringAddressCodeViewModel}"
      Title="LayeringAddressCode001">

    <Page.Resources>
        <Style TargetType="StackPanel" x:Key="RowPanel">
            <Setter Property="Orientation" Value="Horizontal"></Setter>
            <Setter Property="Margin" Value="4"></Setter>
        </Style>
        
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        
        <StackPanel Grid.Row="0" Orientation="Vertical">

            <StackPanel Style="{StaticResource RowPanel}">
                <Label>输入编码</Label>
                <TextBox Text="{Binding InputText}" Width="300"></TextBox>
            </StackPanel>

            <StackPanel Style="{StaticResource RowPanel}">
                <Label>当前输入值</Label>
                <Label Content="{Binding CurrentInput}"></Label>

                <Button Command="{Binding AddToTreeCommand}" CommandParameter="{Binding CurrentInput}" Padding="4, 4">将当前输入内容添加到树</Button>
                <Button Command="{Binding AddToTreeAscCommand}" CommandParameter="{Binding CurrentInput}" Padding="4, 4">升序添加到树</Button>
                <Button Command="{Binding AddToTreeDescCommand}" CommandParameter="{Binding CurrentInput}" Padding="4, 4">降序添加到树</Button>
                
            </StackPanel>

            <StackPanel Style="{StaticResource RowPanel}">
                <Button Command="{Binding AddToListCommand}">添加到列表</Button>
                <Button Command="{Binding SortCommand}">列表排序</Button>
                <Button Command="{Binding BuildTreeCommand}">构建为树</Button>
            </StackPanel>

            <StackPanel Style="{StaticResource RowPanel}">
                <Button Command="{Binding TreeSordAsc1Command}" Padding="4, 4">树升序排序 1</Button>
                <Button Command="{Binding TreeSordDesc1Command}" Padding="4, 4">树降序排序 1</Button>
                <Button Command="{Binding TreeSordAsc2Command}" Padding="4, 4">树升序排序 2</Button>
                <Button Command="{Binding TreeSordDesc2Command}" Padding="4, 4">树降序排序 2</Button>
            </StackPanel>

            <StackPanel Style="{StaticResource RowPanel}">
                <Button Command="{Binding SetRandomRootNodeCommand}">替换根节点为随机值</Button>
                <Button Command="{Binding RemoveRootNodeCommand}">移除根节点</Button>
            </StackPanel>


        </StackPanel>

        <ListBox Grid.Row="1" ItemsSource="{Binding Items}" MinHeight="100">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Border BorderBrush="#88000000" BorderThickness="0.75">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SameWithCurrentInput}" Value="True">
                                        <Setter Property="Background" Value="#8800AA11"></Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SameWithCurrentInput}" Value="False">
                                        <Setter Property="Background" Value="#88FFFFFF"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <StackPanel Orientation="Vertical">
                            <StackPanel Style="{StaticResource RowPanel}">
                                <Label>Code</Label>
                                <Label Content="{Binding Code}"></Label>
                            </StackPanel>
                            <StackPanel Style="{StaticResource RowPanel}">
                                <StackPanel Style="{StaticResource RowPanel}">
                                    <Label>Is Range</Label>
                                    <Label Content="{Binding Code.IsRange}"></Label>
                                </StackPanel>
                                <StackPanel Style="{StaticResource RowPanel}">
                                    <Label>Is All</Label>
                                    <Label Content="{Binding IsAll}"></Label>
                                </StackPanel>
                                <StackPanel Style="{StaticResource RowPanel}">
                                    <Label>当前输入编码是否在此范围内</Label>
                                    <Label Content="{Binding CurrentIsInThisRange}"></Label>
                                </StackPanel>
                            </StackPanel>
                            <!--<StackPanel Style="{StaticResource RowPanel}">
                                <Label Content="{Binding HashString}"></Label>
                            </StackPanel>-->
                            <StackPanel Style="{StaticResource RowPanel}">
                                <Label>与输入值相同</Label>
                                <Label Content="{Binding SameWithCurrentInput}"></Label>
                            </StackPanel>
                        </StackPanel>
                    </Border>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <TreeView Grid.Row="0" Grid.Column="1" Grid.RowSpan="2" ItemsSource="{Binding TreeRootLayer}" DataContext="{Binding}">

            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Childrens}">
                    <StackPanel Orientation="Horizontal"
                                Tag="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeView}}">
                        <StackPanel.ContextMenu>
                            <ContextMenu>
                                <!-- 学习笔记:  -->
                                <!-- PlacementTarget : 微软对PlacementTarget的解释是：获取或设置UIElement，当它打开时相对于它确定ContextMenu的位置。应该可以理解为放置此ContextMenu的UIElement -->
                                <!-- 参考资料 : https://www.cnblogs.com/muran/p/6702444.html -->
                                <MenuItem Header="移除"
                                          Command="{Binding PlacementTarget.Tag.RemoveNodeCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                          CommandParameter="{Binding NodeValue}"/>

                                <MenuItem Header="添加随机迷你分支"
                                          Command="{Binding PlacementTarget.Tag.AddMiniForkCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}}"
                                          CommandParameter="{Binding NodeValue}"/>
                            </ContextMenu>
                        </StackPanel.ContextMenu>
                        <TextBlock Text="|=---  "/>
                        <TextBlock Text="{Binding NodeValue.IsRangeString}"/>
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding HasParent}" Value="False">
                                            <Setter Property="Text" Value="{Binding NodeValue.FullString}"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding HasParent}" Value="True">
                                            <Setter Property="Text" Value="{Binding NodeValue.EndLayerValue}"></Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>

            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="IsExpanded" Value="True"></Setter>
                </Style>
            </TreeView.ItemContainerStyle>
            
        </TreeView>
    </Grid>
</Page>
